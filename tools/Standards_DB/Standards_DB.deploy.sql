/*
Deployment script for Standards_DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Standards_DB"
:setvar DefaultFilePrefix "Standards_DB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS ON 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY ON,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[tbl_documents]...';


GO
CREATE TABLE [dbo].[tbl_documents] (
    [documents_key]               UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [standard_sets_key]           UNIQUEIDENTIFIER NOT NULL,
    [documents_id]                NVARCHAR (50)    NULL,
    [documents_asnIdentifier]     NVARCHAR (8)     NULL,
    [documents_publicationStatus] NVARCHAR (20)    NULL,
    [documents_title]             NVARCHAR (250)   NULL,
    [documents_valid]             INT              NULL,
    [documents_sourceURL]         NVARCHAR (500)   NULL,
    CONSTRAINT [pk_tbl_documents_documents_key] PRIMARY KEY NONCLUSTERED ([documents_key] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_jurisdictions]...';


GO
CREATE TABLE [dbo].[tbl_jurisdictions] (
    [jurisdictions_key]   UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [standard_sets_key]   UNIQUEIDENTIFIER NOT NULL,
    [jurisdictions_id]    NVARCHAR (250)   NOT NULL,
    [jurisdictions_title] NVARCHAR (100)   NULL,
    CONSTRAINT [pk_tbl_jurisdictions_jurisdictions_key] PRIMARY KEY NONCLUSTERED ([jurisdictions_key] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_licenses]...';


GO
CREATE TABLE [dbo].[tbl_licenses] (
    [licenses_key]          UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [standard_sets_key]     UNIQUEIDENTIFIER NOT NULL,
    [licenses_title]        NVARCHAR (250)   NULL,
    [licenses_url]          NVARCHAR (500)   NULL,
    [licenses_rightsHolder] NVARCHAR (250)   NULL,
    CONSTRAINT [pk_tbl_licenses_id] PRIMARY KEY NONCLUSTERED ([licenses_key] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_standard_sets]...';


GO
CREATE TABLE [dbo].[tbl_standard_sets] (
    [standard_sets_key]             UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [standard_sets_id]              NVARCHAR (250)   NULL,
    [standard_sets_subject]         NVARCHAR (250)   NULL,
    [standard_sets_title]           NVARCHAR (250)   NULL,
    [standard_sets_educationLevels] NVARCHAR (MAX)   NULL,
    [standard_sets_rightsHolder]    NVARCHAR (250)   NULL,
    CONSTRAINT [pk_tbl_standard_sets_id] PRIMARY KEY NONCLUSTERED ([standard_sets_key] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_standards]...';


GO
CREATE TABLE [dbo].[tbl_standards] (
    [standards_key]               UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [standard_sets_key]           UNIQUEIDENTIFIER NOT NULL,
    [standards_id]                NVARCHAR (250)   NULL,
    [standards_asnIdentifier]     NVARCHAR (250)   NULL,
    [standards_position]          INT              NULL,
    [standards_depth]             INT              NULL,
    [standards_statementNotation] NVARCHAR (250)   NULL,
    [standards_statementLabel]    NVARCHAR (250)   NULL,
    [standards_listId]            NVARCHAR (250)   NULL,
    [standards_description]       NVARCHAR (MAX)   NULL,
    [standards_ancestorIds]       NVARCHAR (MAX)   NULL,
    CONSTRAINT [pk_tbl_standards_standards_key] PRIMARY KEY NONCLUSTERED ([standards_key] ASC)
);


GO
PRINT N'Creating [dbo].[df_tbl_documents_documents_key]...';


GO
ALTER TABLE [dbo].[tbl_documents]
    ADD CONSTRAINT [df_tbl_documents_documents_key] DEFAULT (NEWSEQUENTIALID()) FOR [documents_key];


GO
PRINT N'Creating [dbo].[df_tbl_jurisdictions_jurisdictions_key]...';


GO
ALTER TABLE [dbo].[tbl_jurisdictions]
    ADD CONSTRAINT [df_tbl_jurisdictions_jurisdictions_key] DEFAULT (NEWSEQUENTIALID()) FOR [jurisdictions_key];


GO
PRINT N'Creating [dbo].[df_tbl_licenses_licenses_key]...';


GO
ALTER TABLE [dbo].[tbl_licenses]
    ADD CONSTRAINT [df_tbl_licenses_licenses_key] DEFAULT (NEWSEQUENTIALID()) FOR [licenses_key];


GO
PRINT N'Creating [dbo].[df_tbl_standard_sets_standard_sets_key]...';


GO
ALTER TABLE [dbo].[tbl_standard_sets]
    ADD CONSTRAINT [df_tbl_standard_sets_standard_sets_key] DEFAULT (NEWSEQUENTIALID()) FOR [standard_sets_key];


GO
PRINT N'Creating [dbo].[df_tbl_standards_standards_key]...';


GO
ALTER TABLE [dbo].[tbl_standards]
    ADD CONSTRAINT [df_tbl_standards_standards_key] DEFAULT (NEWSEQUENTIALID()) FOR [standards_key];


GO
PRINT N'Creating [dbo].[fk_tbl_documents_standard_sets_key]...';


GO
ALTER TABLE [dbo].[tbl_documents]
    ADD CONSTRAINT [fk_tbl_documents_standard_sets_key] FOREIGN KEY ([standard_sets_key]) REFERENCES [dbo].[tbl_standard_sets] ([standard_sets_key]);


GO
PRINT N'Creating [dbo].[fk_tbl_jurisdictions_standard_sets_key]...';


GO
ALTER TABLE [dbo].[tbl_jurisdictions]
    ADD CONSTRAINT [fk_tbl_jurisdictions_standard_sets_key] FOREIGN KEY ([standard_sets_key]) REFERENCES [dbo].[tbl_standard_sets] ([standard_sets_key]);


GO
PRINT N'Creating [dbo].[fk_tbl_licenses_standard_sets_key]...';


GO
ALTER TABLE [dbo].[tbl_licenses]
    ADD CONSTRAINT [fk_tbl_licenses_standard_sets_key] FOREIGN KEY ([standard_sets_key]) REFERENCES [dbo].[tbl_standard_sets] ([standard_sets_key]);


GO
PRINT N'Creating [dbo].[fk_tbl_standards_standard_sets_key]...';


GO
ALTER TABLE [dbo].[tbl_standards]
    ADD CONSTRAINT [fk_tbl_standards_standard_sets_key] FOREIGN KEY ([standard_sets_key]) REFERENCES [dbo].[tbl_standard_sets] ([standard_sets_key]);


GO
PRINT N'Creating [dbo].[v_standards]...';


GO
--
--	View [dbo].[v_standards]	
--
CREATE VIEW [dbo].[v_standards]
AS
(
SELECT                   [SS].[standard_sets_id],
                         [SS].[standard_sets_title],
                         [SS].[standard_sets_subject],
                         [SS].[standard_sets_educationLevels],
                         [L].[licenses_title],
                         [L].[licenses_url],
                         [L].[licenses_rightsHolder],
                         [J].[jurisdictions_id],
                         [J].[jurisdictions_title],
                         [D].[documents_id], 
                         [D].[documents_asnIdentifier], 
                         [D].[documents_publicationStatus], 
                         [D].[documents_title], 
                         [D].[documents_valid], 
                         [D].[documents_sourceURL],
                         [S].[standards_id],
                         [S].[standards_asnIdentifier],
                         [S].[standards_position],
                         [S].[standards_depth],
                         [S].[standards_statementNotation],
                         [S].[standards_statementLabel],
                         [S].[standards_listId],
                         [S].[standards_description],
                         [S].[standards_ancestorIds]


FROM                    [dbo].[tbl_standard_sets] AS [SS]
INNER JOIN              [dbo].[tbl_licenses]      AS [L]   ON [SS].[standard_sets_key] = [L].[standard_sets_key]
INNER JOIN              [dbo].[tbl_jurisdictions] AS [J]   ON [SS].[standard_sets_key] = [J].[standard_sets_key]
INNER JOIN              [dbo].[tbl_documents]     AS [D]   ON [SS].[standard_sets_key] = [D].[standard_sets_key]
INNER JOIN              [dbo].[tbl_standards]     AS [S]   ON [SS].[standard_sets_key] = [S].[standard_sets_key]


)
GO
PRINT N'Creating [dbo].[sp_delete_tbl_documents]...';


GO
/********************************************************************************
        Delete Procedures
********************************************************************************/

CREATE PROCEDURE [dbo].[sp_delete_tbl_documents]
(
    @documents_key UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[tbl_documents] WHERE [documents_key] = @documents_key;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_delete_tbl_jurisdictions]...';


GO
CREATE PROCEDURE [dbo].[sp_delete_tbl_jurisdictions]
(
    @jurisdictions_key UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[tbl_jurisdictions] WHERE [jurisdictions_key] = @jurisdictions_key;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_delete_tbl_licenses]...';


GO
CREATE PROCEDURE [dbo].[sp_delete_tbl_licenses]
(
    @licenses_key UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[tbl_licenses] WHERE [licenses_key] = @licenses_key;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_delete_tbl_standard_sets]...';


GO
CREATE PROCEDURE [dbo].[sp_delete_tbl_standard_sets]
(
    @standard_sets_key UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[tbl_standard_sets] WHERE [standard_sets_key] = @standard_sets_key;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_delete_tbl_standards]...';


GO
CREATE PROCEDURE [dbo].[sp_delete_tbl_standards]
(
    @standards_key UNIQUEIDENTIFIER
)
AS
    BEGIN
        SET NOCOUNT ON;
        DELETE FROM [dbo].[tbl_standards] WHERE [standards_key] = @standards_key;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_insert_tbl_documents]...';


GO
/********************************************************************************
        Insert Procedures
********************************************************************************/

CREATE PROCEDURE [dbo].[sp_insert_tbl_documents]
(
    @documents_key UNIQUEIDENTIFIER,
    @standard_sets_key UNIQUEIDENTIFIER,
    @documents_id NVARCHAR(50) = NULL,
    @documents_asnIdentifier NVARCHAR(8) = NULL,
    @documents_publicationStatus NVARCHAR(20) = NULL,
    @documents_title NVARCHAR(250) = NULL,
    @documents_valid INT = NULL,
    @documents_sourceURL NVARCHAR(500) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[tbl_documents]
        (
            [documents_key],
            [standard_sets_key],
            [documents_id],
            [documents_asnIdentifier],
            [documents_publicationStatus],
            [documents_title],
            [documents_valid],
            [documents_sourceURL]
        )
        VALUES
        (
            @documents_key,
            @standard_sets_key,
            @documents_id,
            @documents_asnIdentifier,
            @documents_publicationStatus,
            @documents_title,
            @documents_valid,
            @documents_sourceURL
        );
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_insert_tbl_jurisdictions]...';


GO
CREATE PROCEDURE [dbo].[sp_insert_tbl_jurisdictions]
(
    @jurisdictions_key UNIQUEIDENTIFIER,
    @standard_sets_key UNIQUEIDENTIFIER,
    @jurisdictions_id NVARCHAR(250),
    @jurisdictions_title NVARCHAR(100) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[tbl_jurisdictions]
        (
            [jurisdictions_key],
            [standard_sets_key],
            [jurisdictions_id],
            [jurisdictions_title]
        )
        VALUES
        (
            @jurisdictions_key,
            @standard_sets_key,
            @jurisdictions_id,
            @jurisdictions_title
        );
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_insert_tbl_licenses]...';


GO
CREATE PROCEDURE [dbo].[sp_insert_tbl_licenses]
(
    @licenses_key UNIQUEIDENTIFIER,
    @standard_sets_key UNIQUEIDENTIFIER,
    @licenses_title NVARCHAR(250) = NULL,
    @licenses_url NVARCHAR(500) = NULL,
    @licenses_rightsHolder NVARCHAR(250) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[tbl_licenses]
        (
            [licenses_key],
            [standard_sets_key],
            [licenses_title],
            [licenses_url],
            [licenses_rightsHolder]
        )
        VALUES
        (
            @licenses_key,
            @standard_sets_key,
            @licenses_title,
            @licenses_url,
            @licenses_rightsHolder
        );
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_insert_tbl_standard_sets]...';


GO
CREATE PROCEDURE [dbo].[sp_insert_tbl_standard_sets]
(
    @standard_sets_key UNIQUEIDENTIFIER,
    @standard_sets_id NVARCHAR(250) = NULL,
    @standard_sets_subject NVARCHAR(250) = NULL,
    @standard_sets_title NVARCHAR(250) = NULL,
    @standard_sets_educationLevels NVARCHAR(MAX) = NULL,
    @standard_sets_rightsHolder NVARCHAR(250) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[tbl_standard_sets]
        (
            [standard_sets_key],
            [standard_sets_id],
            [standard_sets_subject],
            [standard_sets_title],
            [standard_sets_educationLevels],
            [standard_sets_rightsHolder]
        )
        VALUES
        (
            @standard_sets_key,
            @standard_sets_id,
            @standard_sets_subject,
            @standard_sets_title,
            @standard_sets_educationLevels,
            @standard_sets_rightsHolder
        );
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_insert_tbl_standards]...';


GO
CREATE PROCEDURE [dbo].[sp_insert_tbl_standards]
(
    @standards_key UNIQUEIDENTIFIER,
    @standard_sets_key UNIQUEIDENTIFIER,
    @standards_id NVARCHAR(250) = NULL,
    @standards_asnIdentifier NVARCHAR(250) = NULL,
    @standards_position INT = NULL,
    @standards_depth INT = NULL,
    @standards_statementNotation NVARCHAR(250) = NULL,
    @standards_statementLabel NVARCHAR(250) = NULL,
    @standards_listId NVARCHAR(250) = NULL,
    @standards_description NVARCHAR(MAX) = NULL,
    @standards_ancestorIds NVARCHAR(MAX) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        INSERT INTO [dbo].[tbl_standards]
        (
            [standards_key],
            [standard_sets_key],
            [standards_id],
            [standards_asnIdentifier],
            [standards_position],
            [standards_depth],
            [standards_statementNotation],
            [standards_statementLabel],
            [standards_listId],
            [standards_description],
            [standards_ancestorIds]
        )
        VALUES
        (
            @standards_key,
            @standard_sets_key,
            @standards_id,
            @standards_asnIdentifier,
            @standards_position,
            @standards_depth,
            @standards_statementNotation,
            @standards_statementLabel,
            @standards_listId,
            @standards_description,
            @standards_ancestorIds
        );
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_update_tbl_documents]...';


GO
/********************************************************************************
        Update Procedures
********************************************************************************/

CREATE PROCEDURE [dbo].[sp_update_tbl_documents]
(
    @documents_key UNIQUEIDENTIFIER,
    @standard_sets_key UNIQUEIDENTIFIER,
    @documents_id NVARCHAR(50) = NULL,
    @documents_asnIdentifier NVARCHAR(8) = NULL,
    @documents_publicationStatus NVARCHAR(20) = NULL,
    @documents_title NVARCHAR(250) = NULL,
    @documents_valid INT = NULL,
    @documents_sourceURL NVARCHAR(500) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @documents_id IS NULL
            BEGIN
                SET @documents_id = (SELECT [documents_id] FROM [dbo].[tbl_documents] WHERE @documents_key = [documents_key]);
            END
        IF @documents_asnIdentifier IS NULL
            BEGIN
                SET @documents_asnIdentifier = (SELECT [documents_asnIdentifier] FROM [dbo].[tbl_documents] WHERE @documents_key = [documents_key]);
            END
        IF @documents_publicationStatus IS NULL
            BEGIN
                SET @documents_publicationStatus = (SELECT [documents_publicationStatus] FROM [dbo].[tbl_documents] WHERE @documents_key = [documents_key]);
            END
        IF @documents_title IS NULL
            BEGIN
                SET @documents_title = (SELECT [documents_title] FROM [dbo].[tbl_documents] WHERE @documents_key = [documents_key]);
            END
        IF @documents_valid IS NULL
            BEGIN
                SET @documents_valid = (SELECT [documents_valid] FROM [dbo].[tbl_documents] WHERE @documents_key = [documents_key]);
            END
        IF @documents_sourceURL IS NULL
            BEGIN
                SET @documents_sourceURL = (SELECT [documents_sourceURL] FROM [dbo].[tbl_documents] WHERE @documents_key = [documents_key]);
            END
        UPDATE [dbo].[tbl_documents]
        SET [standard_sets_key] = @standard_sets_key,
        [documents_id] = @documents_id,
        [documents_asnIdentifier] = @documents_asnIdentifier,
        [documents_publicationStatus] = @documents_publicationStatus,
        [documents_title] = @documents_title,
        [documents_valid] = @documents_valid,
        [documents_sourceURL] = @documents_sourceURL
        WHERE [documents_key] = @documents_key;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_update_tbl_jurisdictions]...';


GO
CREATE PROCEDURE [dbo].[sp_update_tbl_jurisdictions]
(
    @jurisdictions_key UNIQUEIDENTIFIER,
    @standard_sets_key UNIQUEIDENTIFIER,
    @jurisdictions_id NVARCHAR(250),
    @jurisdictions_title NVARCHAR(100) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @jurisdictions_title IS NULL
            BEGIN
                SET @jurisdictions_title = (SELECT [jurisdictions_title] FROM [dbo].[tbl_jurisdictions] WHERE @jurisdictions_key = [jurisdictions_key]);
            END
        UPDATE [dbo].[tbl_jurisdictions]
        SET [standard_sets_key] = @standard_sets_key,
        [jurisdictions_id] = @jurisdictions_id,
        [jurisdictions_title] = @jurisdictions_title
        WHERE [jurisdictions_key] = @jurisdictions_key;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_update_tbl_licenses]...';


GO
CREATE PROCEDURE [dbo].[sp_update_tbl_licenses]
(
    @licenses_key UNIQUEIDENTIFIER,
    @standard_sets_key UNIQUEIDENTIFIER,
    @licenses_title NVARCHAR(250) = NULL,
    @licenses_url NVARCHAR(500) = NULL,
    @licenses_rightsHolder NVARCHAR(250) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @licenses_title IS NULL
            BEGIN
                SET @licenses_title = (SELECT [licenses_title] FROM [dbo].[tbl_licenses] WHERE @licenses_key = [licenses_key]);
            END
        IF @licenses_url IS NULL
            BEGIN
                SET @licenses_url = (SELECT [licenses_url] FROM [dbo].[tbl_licenses] WHERE @licenses_key = [licenses_key]);
            END
        IF @licenses_rightsHolder IS NULL
            BEGIN
                SET @licenses_rightsHolder = (SELECT [licenses_rightsHolder] FROM [dbo].[tbl_licenses] WHERE @licenses_key = [licenses_key]);
            END
        UPDATE [dbo].[tbl_licenses]
        SET [standard_sets_key] = @standard_sets_key,
        [licenses_title] = @licenses_title,
        [licenses_url] = @licenses_url,
        [licenses_rightsHolder] = @licenses_rightsHolder
        WHERE [licenses_key] = @licenses_key;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_update_tbl_standard_sets]...';


GO
CREATE PROCEDURE [dbo].[sp_update_tbl_standard_sets]
(
    @standard_sets_key UNIQUEIDENTIFIER,
    @standard_sets_id NVARCHAR(250) = NULL,
    @standard_sets_subject NVARCHAR(250) = NULL,
    @standard_sets_title NVARCHAR(250) = NULL,
    @standard_sets_educationLevels NVARCHAR(MAX) = NULL,
    @standard_sets_rightsHolder NVARCHAR(250) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @standard_sets_id IS NULL
            BEGIN
                SET @standard_sets_id = (SELECT [standard_sets_id] FROM [dbo].[tbl_standard_sets] WHERE @standard_sets_key = [standard_sets_key]);
            END
        IF @standard_sets_subject IS NULL
            BEGIN
                SET @standard_sets_subject = (SELECT [standard_sets_subject] FROM [dbo].[tbl_standard_sets] WHERE @standard_sets_key = [standard_sets_key]);
            END
        IF @standard_sets_title IS NULL
            BEGIN
                SET @standard_sets_title = (SELECT [standard_sets_title] FROM [dbo].[tbl_standard_sets] WHERE @standard_sets_key = [standard_sets_key]);
            END
        IF @standard_sets_educationLevels IS NULL
            BEGIN
                SET @standard_sets_educationLevels = (SELECT [standard_sets_educationLevels] FROM [dbo].[tbl_standard_sets] WHERE @standard_sets_key = [standard_sets_key]);
            END
        IF @standard_sets_rightsHolder IS NULL
            BEGIN
                SET @standard_sets_rightsHolder = (SELECT [standard_sets_rightsHolder] FROM [dbo].[tbl_standard_sets] WHERE @standard_sets_key = [standard_sets_key]);
            END
        UPDATE [dbo].[tbl_standard_sets]
        SET [standard_sets_id] = @standard_sets_id,
        [standard_sets_subject] = @standard_sets_subject,
        [standard_sets_title] = @standard_sets_title,
        [standard_sets_educationLevels] = @standard_sets_educationLevels,
        [standard_sets_rightsHolder] = @standard_sets_rightsHolder
        WHERE [standard_sets_key] = @standard_sets_key;
        RETURN @@ROWCOUNT;
    END
GO
PRINT N'Creating [dbo].[sp_update_tbl_standards]...';


GO
CREATE PROCEDURE [dbo].[sp_update_tbl_standards]
(
    @standards_key UNIQUEIDENTIFIER,
    @standard_sets_key UNIQUEIDENTIFIER,
    @standards_id NVARCHAR(250) = NULL,
    @standards_asnIdentifier NVARCHAR(250) = NULL,
    @standards_position INT = NULL,
    @standards_depth INT = NULL,
    @standards_statementNotation NVARCHAR(250) = NULL,
    @standards_statementLabel NVARCHAR(250) = NULL,
    @standards_listId NVARCHAR(250) = NULL,
    @standards_description NVARCHAR(MAX) = NULL,
    @standards_ancestorIds NVARCHAR(MAX) = NULL
)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @standards_id IS NULL
            BEGIN
                SET @standards_id = (SELECT [standards_id] FROM [dbo].[tbl_standards] WHERE @standards_key = [standards_key]);
            END
        IF @standards_asnIdentifier IS NULL
            BEGIN
                SET @standards_asnIdentifier = (SELECT [standards_asnIdentifier] FROM [dbo].[tbl_standards] WHERE @standards_key = [standards_key]);
            END
        IF @standards_position IS NULL
            BEGIN
                SET @standards_position = (SELECT [standards_position] FROM [dbo].[tbl_standards] WHERE @standards_key = [standards_key]);
            END
        IF @standards_depth IS NULL
            BEGIN
                SET @standards_depth = (SELECT [standards_depth] FROM [dbo].[tbl_standards] WHERE @standards_key = [standards_key]);
            END
        IF @standards_statementNotation IS NULL
            BEGIN
                SET @standards_statementNotation = (SELECT [standards_statementNotation] FROM [dbo].[tbl_standards] WHERE @standards_key = [standards_key]);
            END
        IF @standards_statementLabel IS NULL
            BEGIN
                SET @standards_statementLabel = (SELECT [standards_statementLabel] FROM [dbo].[tbl_standards] WHERE @standards_key = [standards_key]);
            END
        IF @standards_listId IS NULL
            BEGIN
                SET @standards_listId = (SELECT [standards_listId] FROM [dbo].[tbl_standards] WHERE @standards_key = [standards_key]);
            END
        IF @standards_description IS NULL
            BEGIN
                SET @standards_description = (SELECT [standards_description] FROM [dbo].[tbl_standards] WHERE @standards_key = [standards_key]);
            END
        IF @standards_ancestorIds IS NULL
            BEGIN
                SET @standards_ancestorIds = (SELECT [standards_ancestorIds] FROM [dbo].[tbl_standards] WHERE @standards_key = [standards_key]);
            END
        UPDATE [dbo].[tbl_standards]
        SET [standard_sets_key] = @standard_sets_key,
        [standards_id] = @standards_id,
        [standards_asnIdentifier] = @standards_asnIdentifier,
        [standards_position] = @standards_position,
        [standards_depth] = @standards_depth,
        [standards_statementNotation] = @standards_statementNotation,
        [standards_statementLabel] = @standards_statementLabel,
        [standards_listId] = @standards_listId,
        [standards_description] = @standards_description,
        [standards_ancestorIds] = @standards_ancestorIds
        WHERE [standards_key] = @standards_key;
        RETURN @@ROWCOUNT;
    END
GO
/*
Post-Deployment Script Template                            
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.        
 Use SQLCMD syntax to include a file in the post-deployment script.            
 Example:      :r .\myfile.sql                                
 Use SQLCMD syntax to reference a variable in the post-deployment script.        
 Example:      :setvar TableName MyTable                            
               SELECT * FROM [$(TableName)]                    
--------------------------------------------------------------------------------------
*/

USE [master];
GO

ALTER AUTHORIZATION ON DATABASE::[$(DatabaseName)] TO [sa]
GO

ALTER DATABASE [$(DatabaseName)] SET RECURSIVE_TRIGGERS ON
GO

USE [$(DatabaseName)]
GO


ALTER DATABASE [$(DatabaseName)] SET COMPATIBILITY_LEVEL = 130
GO

IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [$(DatabaseName)].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO

ALTER DATABASE [$(DatabaseName)] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET ANSI_NULLS OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET ANSI_WARNINGS OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET ARITHABORT OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET AUTO_SHRINK OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [$(DatabaseName)] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET CURSOR_DEFAULT  GLOBAL 
GO

ALTER DATABASE [$(DatabaseName)] SET CONCAT_NULL_YIELDS_NULL OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET QUOTED_IDENTIFIER OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET RECURSIVE_TRIGGERS OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET  ENABLE_BROKER 
GO

ALTER DATABASE [$(DatabaseName)] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [$(DatabaseName)] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET RECOVERY FULL 
GO

ALTER DATABASE [$(DatabaseName)] SET  MULTI_USER 
GO

ALTER DATABASE [$(DatabaseName)] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [$(DatabaseName)] SET DB_CHAINING OFF 
GO

ALTER DATABASE [$(DatabaseName)] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO

ALTER DATABASE [$(DatabaseName)] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO

ALTER DATABASE [$(DatabaseName)] SET DELAYED_DURABILITY = DISABLED 
GO

ALTER DATABASE [$(DatabaseName)] SET QUERY_STORE = OFF
GO

USE [$(DatabaseName)]
GO


ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO

ALTER DATABASE [$(DatabaseName)] SET  READ_WRITE 
GO

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
